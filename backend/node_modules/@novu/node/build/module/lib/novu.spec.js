"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const novu_1 = require("./novu");
const mockConfig = {
    secretKey: '1234',
};
jest.mock('axios');
describe('test initialization of novu node package', () => {
    let novu;
    const originalEnv = process.env;
    beforeEach(() => {
        process.env = {
            ...originalEnv,
            NOVU_SECRET_KEY: 'cafebabe',
        };
    });
    afterEach(() => {
        process.env = originalEnv;
    });
    test('should use the NOVU_SECRET_KEY when defined', async () => {
        expect(new novu_1.Novu().secretKey).toBe('cafebabe');
    });
    test('should use the NOVU_SECRET_KEY when defined', async () => {
        expect(new novu_1.Novu('whatever').secretKey).toBe('whatever');
    });
});
describe('test use of novu node package', () => {
    const mockedAxios = axios_1.default;
    let novu;
    beforeEach(() => {
        mockedAxios.create.mockReturnThis();
        novu = new novu_1.Novu(mockConfig.secretKey);
    });
    test('should trigger correctly', async () => {
        mockedAxios.post.mockResolvedValue({});
        await novu.trigger('test-template', {
            to: 'test-user',
            payload: {
                email: 'test-user@sd.com',
            },
        });
        expect(mockedAxios.post).toHaveBeenCalled();
        expect(mockedAxios.post).toHaveBeenCalledWith('/events/trigger', {
            name: 'test-template',
            to: 'test-user',
            overrides: {},
            payload: {
                email: 'test-user@sd.com',
            },
        });
    });
    test('should broadcast correctly', async () => {
        mockedAxios.post.mockResolvedValue({});
        await novu.broadcast('test-template', {
            payload: {
                email: 'test-user@sd.com',
            },
        });
        expect(mockedAxios.post).toHaveBeenCalled();
        expect(mockedAxios.post).toHaveBeenCalledWith('/events/trigger/broadcast', {
            name: 'test-template',
            overrides: {},
            payload: {
                email: 'test-user@sd.com',
            },
        });
    });
    test('should trigger correctly for all subscribers definitions ', async () => {
        mockedAxios.post.mockResolvedValue({});
        await novu.trigger('test-template', {
            to: ['test-user', 'test-another-user'],
            payload: {
                organizationName: 'Company',
            },
        });
        expect(mockedAxios.post).toHaveBeenCalled();
        expect(mockedAxios.post).toHaveBeenCalledWith('/events/trigger', {
            name: 'test-template',
            to: ['test-user', 'test-another-user'],
            overrides: {},
            payload: {
                organizationName: 'Company',
            },
        });
        await novu.trigger('test-template', {
            to: [
                { subscriberId: 'test-user', firstName: 'test' },
                { subscriberId: 'test-another-user' },
            ],
            payload: {
                organizationName: 'Company',
            },
        });
        expect(mockedAxios.post).toHaveBeenCalled();
        expect(mockedAxios.post).toHaveBeenCalledWith('/events/trigger', {
            name: 'test-template',
            to: [
                { subscriberId: 'test-user', firstName: 'test' },
                { subscriberId: 'test-another-user' },
            ],
            overrides: {},
            payload: {
                organizationName: 'Company',
            },
        });
    });
});
