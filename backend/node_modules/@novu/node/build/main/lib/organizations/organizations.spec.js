"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var novu_1 = require("../novu");
var mockConfig = {
    apiKey: '1234',
};
var mockedOrganization = {
    _id: '649070af750b25b4ac8a4704',
    __v: 0,
    name: 'Test Organization',
    branding: {
        logo: 'https://s3.us-east-1.amazonaws.com/bucket/key.jpeg',
        color: '#ff5517',
        fontFamily: 'Lato',
    },
    createdAt: '2023-06-19T15:13:51.961Z',
    updatedAt: '2023-06-19T15:13:51.966Z',
};
var mockedMember = {
    _id: '649070af750b25b4ac8a4759',
    memberStatus: 'active',
    _userId: '649070afaa9e50289df420d8',
    roles: ['admin'],
    _organizationId: mockedOrganization._id,
    createdAt: mockedOrganization.createdAt,
    updatedAt: mockedOrganization.createdAt,
    __v: 0,
    id: '649070af750b25b4ac8a4759',
    user: {
        _id: '649070afaa9e50289df420d8',
        firstName: 'john',
        lastName: 'doe',
        email: 'johndoe@example.com',
        profilePicture: 'https://gravatar.com/avatar/fd876f8cd6a58277fc664d47ea10ad19?d=mp',
        createdAt: '2023-03-07T13:32:54.573Z',
        id: '649070afaa9e50289df420d8',
    },
};
jest.mock('axios');
describe('Novu Node.js package - Organizations class', function () {
    var mockedAxios = axios_1.default;
    var novu;
    var methods = ['get', 'post', 'put', 'delete', 'patch'];
    beforeEach(function () {
        mockedAxios.create.mockReturnThis();
        novu = new novu_1.Novu(mockConfig.apiKey);
    });
    afterEach(function () {
        methods.forEach(function (method) {
            mockedAxios[method].mockClear();
        });
    });
    it('should list organizations', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        data: [mockedOrganization],
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.organizations.list()];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toBeCalled();
                    expect(result).toStrictEqual(mockedResponse);
                    return [2];
            }
        });
    }); });
    it('should create new organization', function () { return __awaiter(void 0, void 0, void 0, function () {
        var organizationName, mockedResponse, payload, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    organizationName = 'New Organization';
                    mockedResponse = {
                        data: __assign(__assign({}, mockedOrganization), { name: organizationName }),
                    };
                    mockedAxios.post.mockResolvedValue(mockedResponse);
                    payload = { name: organizationName };
                    return [4, novu.organizations.create(payload)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.post).toBeCalledWith('/organizations', payload);
                    expect(result).toStrictEqual(mockedResponse);
                    return [2];
            }
        });
    }); });
    it('should rename current organization', function () { return __awaiter(void 0, void 0, void 0, function () {
        var newName, mockedResponse, payload, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    newName = 'Renamed Organization';
                    mockedResponse = {
                        data: {
                            name: newName,
                        },
                    };
                    mockedAxios.patch.mockResolvedValue(mockedResponse);
                    payload = { name: newName };
                    return [4, novu.organizations.rename(payload)];
                case 1:
                    result = _a.sent();
                    expect(result).toStrictEqual(mockedResponse);
                    expect(mockedAxios.patch).toBeCalledWith('/organizations', payload);
                    return [2];
            }
        });
    }); });
    it('should fetch current organization', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = { data: mockedOrganization };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.organizations.getCurrent()];
                case 1:
                    result = _a.sent();
                    expect(result).toStrictEqual(mockedResponse);
                    expect(mockedAxios.get).toBeCalledWith('/organizations/me');
                    return [2];
            }
        });
    }); });
    it('should remove member from current organization', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = { data: mockedMember };
                    mockedAxios.delete.mockResolvedValue(mockedResponse);
                    return [4, novu.organizations.removeMember(mockedMember.id)];
                case 1:
                    result = _a.sent();
                    expect(result).toStrictEqual(mockedResponse);
                    expect(mockedAxios.delete).toBeCalledWith("/organizations/members/".concat(mockedMember.id));
                    return [2];
            }
        });
    }); });
    it('should update member role in current organization', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, payload, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = { data: mockedMember };
                    mockedAxios.put.mockResolvedValue(mockedResponse);
                    payload = { role: 'admin' };
                    return [4, novu.organizations.updateMemberRole(mockedMember.id, payload)];
                case 1:
                    result = _a.sent();
                    expect(result).toStrictEqual(mockedResponse);
                    expect(mockedAxios.put).toBeCalledWith("/organizations/members/".concat(mockedMember.id, "/roles"), payload);
                    return [2];
            }
        });
    }); });
    it('should fetch all members of current organization', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = { data: [mockedMember] };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.organizations.getMembers()];
                case 1:
                    result = _a.sent();
                    expect(result).toStrictEqual(mockedResponse);
                    expect(mockedAxios.get).toBeCalledWith('/organizations/members');
                    return [2];
            }
        });
    }); });
    it('should update branding details of current organization', function () { return __awaiter(void 0, void 0, void 0, function () {
        var payload, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    payload = {
                        logo: 'https://s3.us-east-1.amazonaws.com/bucket/key.jpeg',
                        color: '#000000',
                        fontFamily: 'Lato',
                    };
                    mockedResponse = { data: payload };
                    mockedAxios.put.mockResolvedValue(mockedResponse);
                    return [4, novu.organizations.updateBranding(payload)];
                case 1:
                    result = _a.sent();
                    expect(result).toStrictEqual(mockedResponse);
                    expect(mockedAxios.put).toBeCalledWith('/organizations/branding', payload);
                    return [2];
            }
        });
    }); });
});
