import { builtinReplacements } from './builtinReplacements';
const matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
function escapeStringRegexp(str) {
    if (typeof str !== 'string') {
        throw new TypeError('Expected a string');
    }
    return str.replace(matchOperatorsRe, '\\$&');
}
const doCustomReplacements = (string, replacements) => {
    for (const [key, value] of replacements) {
        string = string.replace(new RegExp(escapeStringRegexp(key), 'g'), value);
    }
    return string;
};
export const transliterate = (string, options) => {
    if (typeof string !== 'string') {
        throw new TypeError(`Expected a string, got \`${typeof string}\``);
    }
    options = Object.assign(Object.assign({}, options), { customReplacements: options.customReplacements || [] });
    const customReplacements = new Map([
        ...builtinReplacements,
        ...options.customReplacements,
    ]);
    string = string.normalize();
    string = doCustomReplacements(string, customReplacements);
    string = string
        .normalize('NFD')
        .replace(/\p{Diacritic}/gu, '')
        .normalize();
    return string;
};
