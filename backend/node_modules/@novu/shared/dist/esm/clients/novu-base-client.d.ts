export declare class HttpError extends Error {
    responseText: string;
    status: number;
    response: Response;
    constructor(responseText: string, status: number, response: Response);
    toString(): string;
}
export declare class NovuBadRequestError extends HttpError {
}
export declare class NovuUnauthorizedError extends HttpError {
}
export declare class NovuForbiddenError extends HttpError {
}
export declare class NovuNotFoundError extends HttpError {
}
export declare class NovuInternalServerError extends HttpError {
}
export declare class NovuNotImplementedError extends HttpError {
}
export declare class NovuBadGatewayError extends HttpError {
}
export declare class NovuServiceUnavailableError extends HttpError {
}
export declare class NovuGatewayTimeoutError extends HttpError {
}
export declare class NovuRedirectError extends HttpError {
    redirectUrl: string;
    constructor(responseText: string, status: number, redirectUrl: string, response: Response);
}
export declare class NovuRestResult<T, E> {
    isSuccess: boolean;
    value?: T;
    error?: E;
    private constructor();
    static ok<T>(value: T): NovuRestResult<T, never>;
    static fail<E>(error: E): NovuRestResult<never, E>;
    isSuccessResult(): this is {
        value: T;
        error: never;
    };
}
export declare const createNovuBaseClient: (baseUrl: string, headers?: HeadersInit) => {
    safeGet: <T>(endpoint: string) => Promise<NovuRestResult<T, HttpError>>;
    safePut: <T>(endpoint: string, data: object) => Promise<NovuRestResult<T, HttpError>>;
    safePost: <T>(endpoint: string, data: object) => Promise<NovuRestResult<T, HttpError>>;
    safeDelete: (endpoint: string) => Promise<NovuRestResult<void, HttpError>>;
    safePatch: <T>(endpoint: string, data: object) => Promise<NovuRestResult<T, HttpError>>;
};
//# sourceMappingURL=novu-base-client.d.ts.map