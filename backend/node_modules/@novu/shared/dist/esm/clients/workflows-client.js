var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createNovuBaseClient } from './novu-base-client';
export const createWorkflowClient = (baseUrl, headers = {}) => {
    const baseClient = createNovuBaseClient(baseUrl, headers);
    const createWorkflow = (createWorkflowDto) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safePost('/v2/workflows', createWorkflowDto);
    });
    const updateWorkflow = (workflowId, updateWorkflowDto) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safePut(`/v2/workflows/${workflowId}`, updateWorkflowDto);
    });
    const syncWorkflow = (workflowId, syncWorkflowDto) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safePut(`/v2/workflows/${workflowId}/sync`, syncWorkflowDto);
    });
    const getWorkflow = (workflowId) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safeGet(`/v2/workflows/${workflowId}`);
    });
    const getWorkflowStepData = (workflowId, stepId) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safeGet(`/v2/workflows/${workflowId}/steps/${stepId}`);
    });
    const patchWorkflowStepData = (workflowId, stepId, patchStepDataDto) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safePatch(`/v2/workflows/${workflowId}/steps/${stepId}`, patchStepDataDto);
    });
    const patchWorkflow = (workflowId, patchWorkflowDto) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safePatch(`/v2/workflows/${workflowId}`, patchWorkflowDto);
    });
    const deleteWorkflow = (workflowId) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safeDelete(`/v2/workflows/${workflowId}`);
    });
    const searchWorkflows = (queryParams) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const query = new URLSearchParams();
        query.append('offset', ((_a = queryParams.offset) === null || _a === void 0 ? void 0 : _a.toString()) || '0');
        query.append('limit', ((_b = queryParams.limit) === null || _b === void 0 ? void 0 : _b.toString()) || '50');
        if (queryParams.orderDirection) {
            query.append('orderDirection', queryParams.orderDirection);
        }
        if (queryParams.orderByField) {
            query.append('orderByField', queryParams.orderByField);
        }
        if (queryParams.query) {
            query.append('query', queryParams.query);
        }
        return yield baseClient.safeGet(`/v2/workflows?${query.toString()}`);
    });
    const searchWorkflowsV1 = (queryParams) => __awaiter(void 0, void 0, void 0, function* () {
        const query = new URLSearchParams();
        query.append('defaultLimit', '10');
        query.append('maxLimit', '50');
        if (queryParams) {
            query.append('query', queryParams);
        }
        return yield baseClient.safeGet(`/v1/workflows?${query.toString()}`);
    });
    const createWorkflowsV1 = (templateBody) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safePost(`/v1/workflows`, templateBody);
    });
    const generatePreview = (workflowId, stepDatabaseId, generatePreviewDto) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safePost(`/v2/workflows/${workflowId}/step/${stepDatabaseId}/preview`, generatePreviewDto);
    });
    const getWorkflowTestData = (workflowId) => __awaiter(void 0, void 0, void 0, function* () {
        return yield baseClient.safeGet(`/v2/workflows/${workflowId}/test-data`);
    });
    return {
        generatePreview,
        createWorkflow,
        updateWorkflow,
        syncWorkflow,
        getWorkflow,
        deleteWorkflow,
        searchWorkflows,
        getWorkflowTestData,
        getWorkflowStepData,
        patchWorkflowStepData,
        patchWorkflow,
        searchWorkflowsV1,
        createWorkflowsV1,
    };
};
