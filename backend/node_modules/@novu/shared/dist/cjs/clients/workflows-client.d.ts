import { HttpError, NovuRestResult } from './novu-base-client';
import { CreateWorkflowDto, GeneratePreviewRequestDto, GeneratePreviewResponseDto, GetListQueryParams, ListWorkflowResponse, PatchStepDataDto, PatchWorkflowDto, StepDataDto, SyncWorkflowDto, UpdateWorkflowDto, WorkflowResponseDto, WorkflowTestDataResponseDto } from '../dto';
export declare const createWorkflowClient: (baseUrl: string, headers?: HeadersInit) => {
    generatePreview: (workflowId: string, stepDatabaseId: string, generatePreviewDto: GeneratePreviewRequestDto) => Promise<NovuRestResult<GeneratePreviewResponseDto, HttpError>>;
    createWorkflow: (createWorkflowDto: CreateWorkflowDto) => Promise<NovuRestResult<WorkflowResponseDto, HttpError>>;
    updateWorkflow: (workflowId: string, updateWorkflowDto: UpdateWorkflowDto) => Promise<NovuRestResult<WorkflowResponseDto, HttpError>>;
    syncWorkflow: (workflowId: string, syncWorkflowDto: SyncWorkflowDto) => Promise<NovuRestResult<WorkflowResponseDto, HttpError>>;
    getWorkflow: (workflowId: string) => Promise<NovuRestResult<WorkflowResponseDto, HttpError>>;
    deleteWorkflow: (workflowId: string) => Promise<NovuRestResult<void, HttpError>>;
    searchWorkflows: (queryParams: GetListQueryParams) => Promise<NovuRestResult<ListWorkflowResponse, HttpError>>;
    getWorkflowTestData: (workflowId: string) => Promise<NovuRestResult<WorkflowTestDataResponseDto, HttpError>>;
    getWorkflowStepData: (workflowId: string, stepId: string) => Promise<NovuRestResult<StepDataDto, HttpError>>;
    patchWorkflowStepData: (workflowId: string, stepId: string, patchStepDataDto: PatchStepDataDto) => Promise<NovuRestResult<StepDataDto, HttpError>>;
    patchWorkflow: (workflowId: string, patchWorkflowDto: PatchWorkflowDto) => Promise<NovuRestResult<WorkflowResponseDto, HttpError>>;
    searchWorkflowsV1: (queryParams?: string) => Promise<NovuRestResult<WorkflowResponseDto[], HttpError>>;
    createWorkflowsV1: (templateBody: {
        name: string;
        description: string;
        tags: string[];
        notificationGroupId: string;
        steps: any[];
    }) => Promise<NovuRestResult<WorkflowResponseDto, HttpError>>;
};
//# sourceMappingURL=workflows-client.d.ts.map