"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNovuBaseClient = exports.NovuRestResult = exports.NovuRedirectError = exports.NovuGatewayTimeoutError = exports.NovuServiceUnavailableError = exports.NovuBadGatewayError = exports.NovuNotImplementedError = exports.NovuInternalServerError = exports.NovuNotFoundError = exports.NovuForbiddenError = exports.NovuUnauthorizedError = exports.NovuBadRequestError = exports.HttpError = void 0;
class HttpError extends Error {
    constructor(responseText, status, response) {
        super(`${status}: ${responseText}`);
        this.responseText = responseText;
        this.status = status;
        this.response = response;
        this.name = this.constructor.name;
    }
    toString() {
        return `${this.name} (status: ${this.status}): ${this.responseText}`;
    }
}
exports.HttpError = HttpError;
class NovuBadRequestError extends HttpError {
}
exports.NovuBadRequestError = NovuBadRequestError;
class NovuUnauthorizedError extends HttpError {
}
exports.NovuUnauthorizedError = NovuUnauthorizedError;
class NovuForbiddenError extends HttpError {
}
exports.NovuForbiddenError = NovuForbiddenError;
class NovuNotFoundError extends HttpError {
}
exports.NovuNotFoundError = NovuNotFoundError;
class NovuInternalServerError extends HttpError {
}
exports.NovuInternalServerError = NovuInternalServerError;
class NovuNotImplementedError extends HttpError {
}
exports.NovuNotImplementedError = NovuNotImplementedError;
class NovuBadGatewayError extends HttpError {
}
exports.NovuBadGatewayError = NovuBadGatewayError;
class NovuServiceUnavailableError extends HttpError {
}
exports.NovuServiceUnavailableError = NovuServiceUnavailableError;
class NovuGatewayTimeoutError extends HttpError {
}
exports.NovuGatewayTimeoutError = NovuGatewayTimeoutError;
class NovuRedirectError extends HttpError {
    constructor(responseText, status, redirectUrl, response) {
        super(responseText, status, response);
        this.redirectUrl = redirectUrl;
    }
}
exports.NovuRedirectError = NovuRedirectError;
const errorMap = {
    400: NovuBadRequestError,
    401: NovuUnauthorizedError,
    403: NovuForbiddenError,
    404: NovuNotFoundError,
    500: NovuInternalServerError,
    501: NovuNotImplementedError,
    502: NovuBadGatewayError,
    503: NovuServiceUnavailableError,
    504: NovuGatewayTimeoutError,
};
class NovuRestResult {
    constructor(isSuccess, value, error) {
        this.isSuccess = isSuccess;
        this.value = value;
        this.error = error;
    }
    static ok(value) {
        return new NovuRestResult(true, value);
    }
    static fail(error) {
        return new NovuRestResult(false, undefined, error);
    }
    isSuccessResult() {
        return this.isSuccess;
    }
}
exports.NovuRestResult = NovuRestResult;
const createNovuBaseClient = (baseUrl, headers = {}) => {
    const defaultHeaders = Object.assign({ 'Content-Type': 'application/json' }, headers);
    const buildUrl = (endpoint) => `${baseUrl}${endpoint}`;
    const safeFetch = (url, fetchFunc) => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield fetchFunc();
        if (response.ok) {
            const jsonData = yield response.json();
            return NovuRestResult.ok(jsonData.data);
        }
        if (response.status >= 300 && response.status < 400) {
            const responseText = yield getErrorResponse(response);
            const redirectError = new NovuRedirectError(responseText, response.status, response.headers.get('Location') || '', response);
            return NovuRestResult.fail(redirectError);
        }
        const ErrorClass = errorMap[response.status] || HttpError;
        const responseText = yield getErrorResponse(response);
        const errorResult = new ErrorClass(responseText, response.status, response);
        return NovuRestResult.fail(errorResult);
    });
    function getErrorResponse(response) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const json = yield response.json();
                return JSON.stringify(json);
            }
            catch (_a) {
                return yield response.text();
            }
        });
    }
    const safeGet = (endpoint) => __awaiter(void 0, void 0, void 0, function* () {
        return yield safeFetch(endpoint, () => fetch(buildUrl(endpoint), {
            method: 'GET',
            headers: defaultHeaders,
        }));
    });
    const safePut = (endpoint, data) => __awaiter(void 0, void 0, void 0, function* () {
        return yield safeFetch(endpoint, () => fetch(buildUrl(endpoint), {
            method: 'PUT',
            headers: defaultHeaders,
            body: JSON.stringify(data),
        }));
    });
    const safePost = (endpoint, data) => __awaiter(void 0, void 0, void 0, function* () {
        return yield safeFetch(endpoint, () => fetch(buildUrl(endpoint), {
            method: 'POST',
            headers: defaultHeaders,
            body: JSON.stringify(data),
        }));
    });
    const safePatch = (endpoint, data) => __awaiter(void 0, void 0, void 0, function* () {
        return yield safeFetch(endpoint, () => fetch(buildUrl(endpoint), {
            method: 'PATCH',
            headers: defaultHeaders,
            body: JSON.stringify(data),
        }));
    });
    const safeDelete = (endpoint) => __awaiter(void 0, void 0, void 0, function* () {
        return yield safeFetch(endpoint, () => fetch(buildUrl(endpoint), {
            method: 'DELETE',
            headers: defaultHeaders,
        }));
    });
    return {
        safeGet,
        safePut,
        safePost,
        safeDelete,
        safePatch,
    };
};
exports.createNovuBaseClient = createNovuBaseClient;
