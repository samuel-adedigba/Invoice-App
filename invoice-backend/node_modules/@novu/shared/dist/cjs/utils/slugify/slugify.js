"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.slugify = void 0;
const transliterate_1 = require("./transliterate");
const builtinOverridableReplacements = [
    ['&', ' and '],
    ['ðŸ¦„', ' unicorn '],
    ['â™¥', ' love '],
];
const matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
function escapeStringRegexp(str) {
    if (typeof str !== 'string') {
        throw new TypeError('Expected a string');
    }
    return str.replace(matchOperatorsRe, '\\$&');
}
const decamelize = (string) => {
    return (string
        .replace(/([A-Z]{2,})(\d+)/g, '$1 $2')
        .replace(/([a-z\d]+)([A-Z]{2,})/g, '$1 $2')
        .replace(/([a-z\d])([A-Z])/g, '$1 $2')
        .replace(/([A-Z]+)([A-Z][a-rt-z\d]+)/g, '$1 $2'));
};
const removeMootSeparators = (string, separator) => {
    const escapedSeparator = escapeStringRegexp(separator);
    return string
        .replace(new RegExp(`${escapedSeparator}{2,}`, 'g'), separator)
        .replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, 'g'), '');
};
const slugify = (string, options) => {
    var _a;
    if (typeof string !== 'string') {
        throw new TypeError(`Expected a string, got \`${typeof string}\``);
    }
    options = Object.assign({ separator: '-', lowercase: true, decamelize: true, customReplacements: [], preserveLeadingUnderscore: false, preserveTrailingDash: false }, options);
    const shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith('_');
    const shouldAppendDash = options.preserveTrailingDash && string.endsWith('-');
    const customReplacements = new Map([
        ...builtinOverridableReplacements,
        ...options.customReplacements,
    ]);
    string = (0, transliterate_1.transliterate)(string, { customReplacements: Array.from(customReplacements) });
    if (options.decamelize) {
        string = decamelize(string);
    }
    let patternSlug = /[^a-zA-Z\d]+/g;
    if (options.lowercase) {
        string = string.toLowerCase();
        patternSlug = /[^a-z\d]+/g;
    }
    string = string.replace(patternSlug, (_a = options.separator) !== null && _a !== void 0 ? _a : '-');
    string = string.replace(/\\/g, '');
    string = string.replace(/([a-zA-Z\d]+)-([ts])(-|$)/g, '$1$2$3');
    if (options.separator) {
        string = removeMootSeparators(string, options.separator);
    }
    if (shouldPrependUnderscore) {
        string = `_${string}`;
    }
    if (shouldAppendDash) {
        string = `${string}-`;
    }
    return string;
};
exports.slugify = slugify;
