"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var novu_1 = require("../novu");
var mockConfig = {
    apiKey: '1234',
};
jest.mock('axios');
describe('test use of novus node package - Workflow overrride class', function () {
    var mockedAxios = axios_1.default;
    var novu;
    beforeEach(function () {
        mockedAxios.create.mockReturnThis();
        novu = new novu_1.Novu(mockConfig.apiKey);
    });
    test('should fetch all the worker-overrides correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        data: {
                            hasMore: false,
                            data: [],
                            pageSize: 10,
                            page: 0,
                        },
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.list()];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/workflow-overrides', {
                        params: {
                            page: 0,
                            limit: 10,
                        },
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should fetch all the workflow-overrides correctly of 2nd page', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        data: {
                            hasMore: false,
                            data: [],
                            pageSize: 10,
                            page: 2,
                        },
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.list(2)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/workflow-overrides', {
                        params: {
                            page: 2,
                            limit: 10,
                        },
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should fetch all the workflow-overrides correctly with limit of 15', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        data: {
                            hasMore: false,
                            data: [],
                            pageSize: 15,
                            page: 0,
                        },
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.list(0, 15)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/workflow-overrides', {
                        params: {
                            page: 0,
                            limit: 15,
                        },
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should fetch all the workflow-overrides correctly of page 3 with limit of 20', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        data: {
                            hasMore: false,
                            data: [],
                            pageSize: 20,
                            page: 3,
                        },
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.list(3, 20)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/workflow-overrides', {
                        params: {
                            page: 3,
                            limit: 20,
                        },
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should create a workflow override with the given parameters', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        _id: '_id',
                        _organizationId: '_organizationId',
                        _environmentId: '_environmentId',
                        _workflowId: 'workflow_id_123',
                        _tenantId: 'tenant_id_abc',
                        active: false,
                        preferenceSettings: {},
                        deleted: true,
                        deletedAt: 'deletedAt',
                        deletedBy: 'deletedBy',
                        createdAt: 'createdAt',
                        updatedAt: 'updatedAt',
                    };
                    mockedAxios.post.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.create({
                            workflowId: 'workflow_id_123',
                            tenantId: 'tenant_id_abc',
                            active: false,
                            preferenceSettings: {
                                email: false,
                                sms: false,
                                in_app: false,
                                chat: true,
                                push: false,
                            },
                        })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith('/workflow-overrides', {
                        workflowId: 'workflow_id_123',
                        tenantId: 'tenant_id_abc',
                        active: false,
                        preferenceSettings: {
                            email: false,
                            sms: false,
                            in_app: false,
                            chat: true,
                            push: false,
                        },
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should update the given workflow override', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        _id: '_id',
                        _organizationId: '_organizationId',
                        _environmentId: '_environmentId',
                        _workflowId: 'WORKFLOW_ID',
                        _tenantId: 'TENANT_ID',
                        active: false,
                        preferenceSettings: {},
                        deleted: true,
                        deletedAt: 'deletedAt',
                        deletedBy: 'deletedBy',
                        createdAt: 'createdAt',
                        updatedAt: 'updatedAt',
                    };
                    mockedAxios.put.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.updateOneByTenantIdandWorkflowId('WORKFLOW_ID', 'TENANT_ID', {
                            active: true,
                        })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.put).toHaveBeenCalled();
                    expect(mockedAxios.put).toHaveBeenCalledWith('/workflow-overrides/workflows/WORKFLOW_ID/tenants/TENANT_ID', {
                        active: true,
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should delete the workflow override by specified override id', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = true;
                    mockedAxios.delete.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.create({
                            workflowId: 'workflow_id_123',
                            tenantId: 'tenant_id_abc',
                            active: false,
                            preferenceSettings: {
                                email: false,
                                sms: false,
                                in_app: false,
                                chat: true,
                                push: false,
                            },
                        })];
                case 1:
                    _a.sent();
                    return [4, novu.workflowOverrides.delete('workflow_id_123')];
                case 2:
                    result = _a.sent();
                    expect(mockedAxios.delete).toHaveBeenCalled();
                    expect(mockedAxios.delete).toHaveBeenCalledWith("/workflow-overrides/workflow_id_123");
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should fetch the workflow-overide with the given override id', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        _id: '_id',
                        _organizationId: '_organizationId',
                        _environmentId: '_environmentId',
                        _workflowId: 'WORKFLOW_ID',
                        _tenantId: 'TENANT_ID',
                        active: false,
                        preferenceSettings: {},
                        deleted: true,
                        deletedAt: 'deletedAt',
                        deletedBy: 'deletedBy',
                        createdAt: 'createdAt',
                        updatedAt: 'updatedAt',
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.getOneById('OVERRIDE_ID')];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/workflow-overrides/OVERRIDE_ID');
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should fetch the workflow-overide with the given tenant id', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        _id: '_id',
                        _organizationId: '_organizationId',
                        _environmentId: '_environmentId',
                        _workflowId: 'WORKFLOW_ID',
                        _tenantId: 'TENANT_ID',
                        active: false,
                        preferenceSettings: {},
                        deleted: true,
                        deletedAt: 'deletedAt',
                        deletedBy: 'deletedBy',
                        createdAt: 'createdAt',
                        updatedAt: 'updatedAt',
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.getOneByTenantIdandWorkflowId('WORKFLOW_ID', 'TENANT_ID')];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/workflow-overrides/workflows/WORKFLOW_ID/tenants/TENANT_ID');
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should update the workflow override by id', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedResponse = {
                        _id: '_id',
                        _organizationId: '_organizationId',
                        _environmentId: '_environmentId',
                        _workflowId: 'WORKFLOW_ID',
                        _tenantId: 'TENANT_ID',
                        active: false,
                        preferenceSettings: {},
                        deleted: true,
                        deletedAt: 'deletedAt',
                        deletedBy: 'deletedBy',
                        createdAt: 'createdAt',
                        updatedAt: 'updatedAt',
                    };
                    mockedAxios.put.mockResolvedValue(mockedResponse);
                    return [4, novu.workflowOverrides.updateOneById('OVERRIDE_ID', {
                            active: false,
                        })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.put).toHaveBeenCalled();
                    expect(mockedAxios.put).toHaveBeenCalledWith('/workflow-overrides/OVERRIDE_ID', {
                        active: false,
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
});
