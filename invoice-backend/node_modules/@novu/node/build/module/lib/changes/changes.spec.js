"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const novu_1 = require("../novu");
const mockConfig = {
    apiKey: '1234',
};
jest.mock('axios');
describe('test use of novus node package - Changes class', () => {
    const mockedAxios = axios_1.default;
    let novu;
    beforeEach(() => {
        mockedAxios.create.mockReturnThis();
        novu = new novu_1.Novu(mockConfig.apiKey);
    });
    test('should get changes correctly', async () => {
        const page = 1;
        const limit = 20;
        const promoted = false;
        mockedAxios.post.mockResolvedValue({});
        await novu.changes.get({ page, limit, promoted });
        expect(mockedAxios.get).toHaveBeenCalled();
        expect(mockedAxios.get).toHaveBeenCalledWith('/changes', {
            params: {
                limit: 20,
                page: 1,
                promoted: false,
            },
        });
    });
    test('should get count of changes correctly', async () => {
        mockedAxios.post.mockResolvedValue({});
        await novu.changes.getCount();
        expect(mockedAxios.get).toHaveBeenCalled();
        expect(mockedAxios.get).toHaveBeenCalledWith('/changes/count');
    });
    test('should apply one change', async () => {
        mockedAxios.post.mockResolvedValue({});
        await novu.changes.applyOne('change1');
        expect(mockedAxios.post).toHaveBeenCalled();
        expect(mockedAxios.post).toHaveBeenCalledWith('/changes/change1/apply', {});
    });
    test('should apply one change', async () => {
        mockedAxios.post.mockResolvedValue({});
        await novu.changes.applyMany(['changeID', 'change2ID']);
        expect(mockedAxios.post).toHaveBeenCalled();
        expect(mockedAxios.post).toHaveBeenCalledWith('/changes/bulk/apply', {
            changeIds: ['changeID', 'change2ID'],
        });
    });
});
