"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Novu = void 0;
const axios_1 = __importDefault(require("axios"));
const shared_1 = require("@novu/shared");
const events_1 = require("events");
const subscribers_1 = require("./subscribers/subscribers");
const changes_1 = require("./changes/changes");
const events_2 = require("./events/events");
const layouts_1 = require("./layouts/layouts");
const notification_groups_1 = require("./notification-groups/notification-groups");
const notification_template_1 = require("./notification-template/notification-template");
const environments_1 = require("./environments/environments");
const feeds_1 = require("./feeds/feeds");
const topics_1 = require("./topics/topics");
const integrations_1 = require("./integrations/integrations");
const messages_1 = require("./messages/messages");
const tenants_1 = require("./tenants/tenants");
const execution_details_1 = require("./execution-details/execution-details");
const inbound_parse_1 = require("./inbound-parse/inbound-parse");
const organizations_1 = require("./organizations/organizations");
const workflow_override_1 = require("./workflow-override/workflow-override");
const retry_1 = require("./retry");
class Novu extends events_1.EventEmitter {
    secretKey;
    http;
    subscribers;
    environments;
    events;
    changes;
    layouts;
    notificationGroups;
    notificationTemplates;
    feeds;
    topics;
    integrations;
    messages;
    tenants;
    executionDetails;
    inboundParse;
    organizations;
    workflowOverrides;
    constructor(...args) {
        super();
        let secretKey;
        let config;
        if (arguments.length === 2) {
            [secretKey, config] = args;
        }
        else if (arguments.length === 1) {
            if (typeof args[0] === 'object') {
                const { secretKey: key, ...rest } = args[0];
                secretKey = key;
                config = rest;
            }
            else {
                [secretKey] = args;
            }
        }
        else {
            secretKey =
                (0, shared_1.getEnvVariable)('NOVU_SECRET_KEY') || (0, shared_1.getEnvVariable)('NOVU_API_KEY');
        }
        if (!secretKey) {
            throw new Error('Missing secret key. Set the NOVU_SECRET_KEY environment variable or pass a secretKey to new Novu(secretKey) constructor.');
        }
        this.secretKey = secretKey;
        const axiosInstance = axios_1.default.create({
            baseURL: this.buildBackendUrl(config),
            headers: {
                Authorization: `ApiKey ${this.secretKey}`,
            },
        });
        if (config?.retryConfig) {
            (0, retry_1.makeRetryable)(axiosInstance, config);
        }
        this.http = axiosInstance;
        this.subscribers = new subscribers_1.Subscribers(this.http);
        this.environments = new environments_1.Environments(this.http);
        this.events = new events_2.Events(this.http);
        this.changes = new changes_1.Changes(this.http);
        this.layouts = new layouts_1.Layouts(this.http);
        this.notificationGroups = new notification_groups_1.NotificationGroups(this.http);
        this.notificationTemplates = new notification_template_1.NotificationTemplates(this.http);
        this.feeds = new feeds_1.Feeds(this.http);
        this.topics = new topics_1.Topics(this.http);
        this.integrations = new integrations_1.Integrations(this.http);
        this.messages = new messages_1.Messages(this.http);
        this.tenants = new tenants_1.Tenants(this.http);
        this.executionDetails = new execution_details_1.ExecutionDetails(this.http);
        this.inboundParse = new inbound_parse_1.InboundParse(this.http);
        this.organizations = new organizations_1.Organizations(this.http);
        this.workflowOverrides = new workflow_override_1.WorkflowOverrides(this.http);
        this.trigger = this.events.trigger;
        this.bulkTrigger = this.events.bulkTrigger;
        this.broadcast = this.events.broadcast;
    }
    trigger;
    bulkTrigger;
    broadcast;
    buildBackendUrl(config) {
        const novuApiVersion = 'v1';
        if (!config?.backendUrl) {
            return `https://api.novu.co/${novuApiVersion}`;
        }
        return config?.backendUrl.includes('novu.co/v')
            ? config?.backendUrl
            : `${config?.backendUrl}/${novuApiVersion}`;
    }
}
exports.Novu = Novu;
